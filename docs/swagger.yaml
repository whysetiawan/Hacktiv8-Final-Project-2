basePath: /api
definitions:
  dto.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UpsertSocialMediaDto:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  dto.UpsertUserDto:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  models.CommentModel:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      message:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.PhotoModel:
    properties:
      comment:
        items:
          $ref: '#/definitions/models.CommentModel'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.SocialMediaModel:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.UserModel:
    properties:
      age:
        type: integer
      comments:
        items:
          $ref: '#/definitions/models.CommentModel'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      photos:
        items:
          $ref: '#/definitions/models.PhotoModel'
        type: array
      social_medias:
        items:
          $ref: '#/definitions/models.SocialMediaModel'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  utils.HttpError:
    properties:
      message: {}
      stack_trace: {}
    type: object
  utils.HttpSuccess-array_models_SocialMediaModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.SocialMediaModel'
        type: array
      message: {}
    type: object
  utils.HttpSuccess-array_models_UserModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserModel'
        type: array
      message: {}
    type: object
  utils.HttpSuccess-dto_UpsertUserDto:
    properties:
      data:
        $ref: '#/definitions/dto.UpsertUserDto'
      message: {}
    type: object
  utils.HttpSuccess-models_LoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponse'
      message: {}
    type: object
  utils.HttpSuccess-models_SocialMediaModel:
    properties:
      data:
        $ref: '#/definitions/models.SocialMediaModel'
      message: {}
    type: object
  utils.HttpSuccess-string:
    properties:
      data:
        type: string
      message: {}
    type: object
host: localhost:3030
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /socialmedias:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-array_models_SocialMediaModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: get all social medias based on user
      tags:
      - Social Media
    post:
      parameters:
      - description: Create Social Media DTO
        in: body
        name: SocialMedia
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertSocialMediaDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HttpSuccess-models_SocialMediaModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: create a social media
      tags:
      - Social Media
  /socialmedias/{id}:
    delete:
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: Delete Social Media By ID
      tags:
      - Social Media
    put:
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Social Media Based On User
        in: body
        name: SocialMedia
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertSocialMediaDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-models_SocialMediaModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: create a user
      tags:
      - Social Media
  /user:
    delete:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: delete current user based on JWT
      tags:
      - User
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-array_models_UserModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: get mutilple users
      tags:
      - User
    put:
      parameters:
      - description: Update User Based On Token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertUserDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-dto_UpsertUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: create a user
      tags:
      - User
  /user/login:
    post:
      parameters:
      - description: Login User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-models_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: login a user
      tags:
      - User
  /user/register:
    post:
      parameters:
      - description: Create User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertUserDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HttpSuccess-dto_UpsertUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: create a user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
